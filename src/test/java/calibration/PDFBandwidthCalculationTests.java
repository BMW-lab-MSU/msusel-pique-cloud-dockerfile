package calibration;

import org.junit.Test;
import pique.utility.BigDecimalWithContext;

import java.math.BigDecimal;

public class PDFBandwidthCalculationTests {

    public PDFBandwidthCalculationTests(){

    }

    @Test
    public void testSizeInBytes(){
        double[] data = new double[]{17998089, 4461210, 1146369, 142086441, 194400605, 57674888, 63143303, 5539349, 5524281, 16028126, 5539890, 1452664, 1219782, 1430648, 358911386, 7792812, 1231733, 5575116, 131235464, 410765421, 125830550, 76841107, 76845527, 7789871, 119165165, 1434593, 1235829, 72783166, 127474827, 1358201, 7076440, 4408909, 5614774, 5541834, 4817652, 80891677, 188278440, 73691008, 1235724, 1216959, 77544497, 146426312, 117717681, 187634551, 187681513, 11800325, 70244246, 194435348, 1095340, 188284994, 69991830, 7322585, 100550115, 5572037, 51923961, 4269646, 7330497, 7330497, 142121883, 7349436, 4707853, 171619397, 7792915, 1199417, 120123901, 4261486, 1344001, 73678471, 188169602, 1430664, 7372221, 4336849, 5608980, 1129289, 57012791, 5619315, 5576169, 50523575, 77384663, 135825842, 5610661, 187934680, 5591284, 7372221, 77820101, 5610661, 109274442, 4269678, 239652413, 5577485, 1235640, 72802139, 57190906, 1162745, 57830532, 1212863, 52934075, 41081260, 17998089, 1146369, 17067909, 239652413, 95621733, 187578408, 186834663, 5569341, 4261486, 17711349, 17272354, 73945709, 186703053, 78108960, 5528857, 5577054, 5197116, 5528857, 5593295, 1219430, 5608316, 52054121, 1212863, 1344001, 77859171, 5587018, 52134203, 1227448, 69948113, 7044854, 78104823, 15494201, 1452664, 69967220, 1129257, 112434063, 5608298, 4344210, 73856188, 133088455, 73853571, 63153699, 80099799, 4269678, 40974740, 5570176, 109057550, 189901400, 1199418, 4858994, 4858994, 1430664, 87472625, 85858637, 69991830, 1339457, 56023309, 109311106, 50467798, 74308677, 5590942, 1319569, 142285129, 5600786, 1112820, 5589787, 1106304, 1146369, 5608978, 1129289, 7076442, 146405320, 1093484, 111484555, 63254713, 131307886, 148058157, 5595495, 5608877, 5608951, 108938508, 187935363, 57244201, 188734666, 137729081, 5576689, 11503910, 74925045, 101372503, 194496868, 5589355, 5583268, 72803102, 1210546789, 7384808, 4186552, 5586407, 1112820, 5197116, 72809480, 48743309, 5205307, 72742757, 1146369, 72757030};

        BigDecimal[] dataAsBigDecimal = new BigDecimalWithContext[data.length];
        for (int i = 0; i < data.length; i++) {
            dataAsBigDecimal[i] = new BigDecimalWithContext(data[i]);
        }

        PDFBandwidthCalculator pdfBandwidthCalculator = new PDFBandwidthCalculator();

        double bandwidth = pdfBandwidthCalculator.calculateBandwidth(dataAsBigDecimal);
        System.out.println(bandwidth);

        BigDecimal output = pdfBandwidthCalculator.utilityFunction(new BigDecimalWithContext(7322585.0), dataAsBigDecimal, false);
        System.out.println(output);

    }

    @Test
    public void testInefficientBytes(){
        double[] data = new double[]{1432405, 0, 0, 3839767, 218585, 142617, 0, 0, 0, 112350, 0, 0, 0, 0, 14504589, 0, 0, 0, 4226, 2483429, 3645817, 936794, 936499, 0, 21435217, 0, 0, 0, 41553057, 0, 0, 0, 0, 0, 0, 300, 198457, 300, 0, 0, 0, 3559880, 4290, 3620146, 3555671, 117686, 0, 218585, 0, 198457, 422, 0, 11522464, 0, 193726, 0, 0, 0, 3813763, 0, 0, 3669967, 0, 0, 11391778, 0, 0, 300, 12843605, 0, 0, 0, 0, 0, 336141, 0, 0, 193306, 0, 4226, 0, 198457, 0, 0, 0, 0, 3598841, 0, 4134674, 0, 0, 0, 661760, 0, 665812, 0, 781024, 698193, 1432405, 0, 10272756, 4134674, 15653027, 3946145, 3550877, 0, 0, 112774, 11087800, 300, 3566865, 0, 0, 0, 0, 0, 0, 0, 0, 1513354, 0, 0, 0, 0, 1513354, 0, 0, 0, 0, 52158, 0, 422, 0, 26607615, 0, 0, 300, 3683150, 300, 0, 0, 0, 697538, 0, 3585440, 5271091, 0, 0, 0, 0, 17673590, 11102590, 422, 0, 659295, 3586974, 193306, 300, 0, 0, 3823853, 0, 0, 0, 0, 0, 0, 0, 0, 3522425, 0, 25663449, 234, 4256, 3622213, 0, 0, 0, 3616329, 12847407, 335941, 4355266, 159849, 0, 117682, 300, 11785472, 4026966, 0, 0, 0, 535, 0, 0, 0, 0, 0, 0, 11653751, 0, 0, 0, 0};

        BigDecimal[] dataAsBigDecimal = new BigDecimalWithContext[data.length];
        for (int i = 0; i < data.length; i++) {
            dataAsBigDecimal[i] = new BigDecimalWithContext(data[i]);
        }

        PDFBandwidthCalculator pdfBandwidthCalculator = new PDFBandwidthCalculator();

        double bandwidth = pdfBandwidthCalculator.calculateBandwidth(dataAsBigDecimal);
        System.out.println(bandwidth);

        BigDecimal output = pdfBandwidthCalculator.utilityFunction(new BigDecimalWithContext(2483429), dataAsBigDecimal, false);
        System.out.println(output);

    }
}
